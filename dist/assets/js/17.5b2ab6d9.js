(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{424:function(_,v,t){"use strict";t.r(v);var c=t(21),e=Object(c.a)({},(function(){var _=this,v=_.$createElement,t=_._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("blockquote",[t("p",[_._v("说明：本章内容为博主在原教程基础上添加自己的学习笔记，来源https://www.zhihu.com/question/446980297/answer/1755892330，教程版权归原作者所有。")])]),_._v(" "),t("h2",{attrs:{id:"一、内存管理篇"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一、内存管理篇"}},[_._v("#")]),_._v(" 一、内存管理篇")]),_._v(" "),t("h3",{attrs:{id:"_1、什么是按需分页"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、什么是按需分页"}},[_._v("#")]),_._v(" "),t("strong",[_._v("1、什么是按需分页")])]),_._v(" "),t("p",[_._v("在操作系统中，进程是以页为单位加载到内存中的，按需分页是一种"),t("code",[_._v("虚拟内存")]),_._v("的管理方式。在使用请求分页的系统中，只有在尝试访问页面所在的磁盘并且该页面尚未在内存中时，也就发生了"),t("code",[_._v("缺页异常")]),_._v("，操作系统才会将磁盘页面复制到内存中。")]),_._v(" "),t("h3",{attrs:{id:"_2、什么是虚拟内存"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、什么是虚拟内存"}},[_._v("#")]),_._v(" "),t("strong",[_._v("2、什么是虚拟内存")])]),_._v(" "),t("p",[t("code",[_._v("虚拟内存")]),_._v("是一种内存分配方案，是一项可以用来辅助内存分配的机制。我们知道，应用程序是按页装载进内存中的。但并不是所有的页都会装载到内存中，计算机中的硬件和软件会将数据从 RAM 临时传输到磁盘中来弥补内存的不足。如果没有虚拟内存的话，一旦你将计算机内存填满后，计算机会对你说")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://pic4.zhimg.com/50/v2-995c67c8487d3b2452943b96c0a45649_hd.jpg?source=1940ef5c",alt:"img"}}),t("img",{attrs:{src:"https://pic4.zhimg.com/80/v2-995c67c8487d3b2452943b96c0a45649_720w.jpg?source=1940ef5c",alt:"img"}})]),_._v(" "),t("p",[_._v("呃，不，"),t("strong",[_._v("对不起，您无法再加载任何应用程序，请关闭另一个应用程序以加载新的应用程序")]),_._v("。对于虚拟内存，计算机可以执行操作是查看内存中最近未使用过的区域，然后将其复制到硬盘上。虚拟内存通过复制技术实现了 "),t("strong",[_._v("妹子，你快来看哥哥能装这么多程序")]),_._v(" 的资本。复制是自动进行的，你无法感知到它的存在。")]),_._v(" "),t("h3",{attrs:{id:"_3、虚拟内存的实现方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、虚拟内存的实现方式"}},[_._v("#")]),_._v(" "),t("strong",[_._v("3、虚拟内存的实现方式")])]),_._v(" "),t("p",[_._v("虚拟内存中，允许将一个作业分多次调入内存。釆用连续分配方式时，会使相当一部分内存空间都处于暂时或"),t("code",[_._v("永久")]),_._v("的空闲状态，造成内存资源的严重浪费，而且也无法从逻辑上扩大内存容量。因此，虚拟内存的实需要建立在离散分配的内存管理方式的基础上。虚拟内存的实现有以下三种方式：")]),_._v(" "),t("ul",[t("li",[_._v("请求分页存储管理。")]),_._v(" "),t("li",[_._v("请求分段存储管理。")]),_._v(" "),t("li",[_._v("请求段页式存储管理。")])]),_._v(" "),t("p",[_._v("不管哪种方式，都需要有一定的硬件支持。一般需要的支持有以下几个方面：")]),_._v(" "),t("ul",[t("li",[_._v("一定容量的内存和外存。")]),_._v(" "),t("li",[_._v("页表机制（或段表机制），作为主要的数据结构。")]),_._v(" "),t("li",[_._v("中断机构，当用户程序要访问的部分尚未调入内存，则产生中断。")]),_._v(" "),t("li",[_._v("地址变换机构，逻辑地址到物理地址的变换。")])]),_._v(" "),t("h3",{attrs:{id:"_4、内存为什么要分段"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_4、内存为什么要分段"}},[_._v("#")]),_._v(" "),t("strong",[_._v("4、内存为什么要分段")])]),_._v(" "),t("p",[_._v("内存是随机访问设备，对于内存来说，不需要从头开始查找，只需要直接给出地址即可。内存的分段是从 "),t("code",[_._v("8086 CPU")]),_._v(" 开始的，8086 的 CPU 还是 16 位的寄存器宽，16 位的寄存器可以存储的数字范围是 2 的 16 次方，即 64 KB，8086 的 CPU 还没有 "),t("code",[_._v("虚拟地址")]),_._v("，只有物理地址，也就是说，如果两个相同的程序编译出来的地址相同，那么这两个程序是无法同时运行的。为了解决这个问题，操作系统设计人员提出了让 CPU 使用 "),t("code",[_._v("段基址 + 段内偏移")]),_._v(" 的方式来访问任意内存。这样的好处是让程序可以 "),t("code",[_._v("重定位")]),_._v("，"),t("strong",[_._v("这也是内存为什么要分段的第一个原因")]),_._v("。")]),_._v(" "),t("blockquote",[t("p",[_._v("那么什么是重定位呢？")])]),_._v(" "),t("p",[_._v("简单来说就是将程序中的指令地址改为另一个地址，地址处存储的内容还是原来的。")]),_._v(" "),t("p",[_._v("CPU 采用段基址 + 段内偏移地址的形式访问内存，就需要提供专门的寄存器，这些专门的寄存器就是 **CS、DS、ES 等")]),_._v(" "),t("p",[_._v("也就是说，程序中需要用到哪块内存，就需要先加载合适的段到段基址寄存器中，再给出相对于该段基址的段偏移地址即可。CPU 中的地址加法器会将这两个地址进行合并，从地址总线送入内存。")]),_._v(" "),t("p",[_._v("8086 的 CPU 有 20 根地址总线，最大的寻址能力是 1MB，而段基址所在的寄存器宽度只有 16 位，最大为你 64 KB 的寻址能力，64 KB 显然不能满足 1MB 的最大寻址范围，所以就要把内存分段，每个段的最大寻址能力是 64KB，但是仍旧不能达到最大 1 MB 的寻址能力，所以这时候就需要 "),t("code",[_._v("偏移地址")]),_._v("的辅助，偏移地址也存入寄存器，同样为 64 KB 的寻址能力，这么一看还是不能满足 1MB 的寻址，所以 CPU 的设计者对地址单元动了手脚，将段基址左移 4 位，然后再和 16 位的段内偏移地址相加，就达到了 1MB 的寻址能力。"),t("strong",[_._v("所以内存分段的第二个目的就是能够访问到所有内存")]),_._v("。")]),_._v(" "),t("h2",{attrs:{id:"二、物理地址、逻辑地址、有效地址、线性地址、虚拟地址的区别"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二、物理地址、逻辑地址、有效地址、线性地址、虚拟地址的区别"}},[_._v("#")]),_._v(" "),t("strong",[_._v("二、物理地址、逻辑地址、有效地址、线性地址、虚拟地址的区别")])]),_._v(" "),t("p",[_._v("物理地址就是内存中真正的地址，它就相当于是你家的门牌号，你家就肯定有这个门牌号，具有唯一性。"),t("strong",[_._v("不管哪种地址，最终都会映射为物理地址")]),_._v("。")]),_._v(" "),t("p",[_._v("在"),t("code",[_._v("实模式")]),_._v("下，段基址 + 段内偏移经过地址加法器的处理，经过地址总线传输，最终也会转换为"),t("code",[_._v("物理地址")]),_._v("。")]),_._v(" "),t("p",[_._v("但是在"),t("code",[_._v("保护模式")]),_._v("下，段基址 + 段内偏移被称为"),t("code",[_._v("线性地址")]),_._v("，不过此时的段基址不能称为真正的地址，而是会被称作为一个"),t("code",[_._v("选择子")]),_._v("的东西，选择子就是个索引，相当于数组的下标，通过这个索引能够在 GDT 中找到相应的段描述符，段描述符记录了"),t("strong",[_._v("段的起始、段的大小")]),_._v("等信息，这样便得到了基地址。如果此时没有开启内存分页功能，那么这个线性地址可以直接当做物理地址来使用，直接访问内存。如果开启了分页功能，那么这个线性地址又多了一个名字，这个名字就是"),t("code",[_._v("虚拟地址")]),_._v("。")]),_._v(" "),t("p",[_._v("不论在实模式还是保护模式下，段内偏移地址都叫做"),t("code",[_._v("有效地址")]),_._v("。有效抵制也是逻辑地址。")]),_._v(" "),t("p",[_._v("线性地址可以看作是"),t("code",[_._v("虚拟地址")]),_._v("，虚拟地址不是真正的物理地址，但是虚拟地址会最终被映射为物理地址。下面是虚拟地址 -> 物理地址的映射。")]),_._v(" "),t("h2",{attrs:{id:"三、空闲内存管理的方式"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三、空闲内存管理的方式"}},[_._v("#")]),_._v(" "),t("strong",[_._v("三、空闲内存管理的方式")])]),_._v(" "),t("p",[_._v("操作系统在动态分配内存时（malloc，new），需要对空间内存进行管理。一般采用了两种方式：位图和空闲链表。")]),_._v(" "),t("h3",{attrs:{id:"_1、使用位图进行管理"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、使用位图进行管理"}},[_._v("#")]),_._v(" "),t("strong",[_._v("1、使用位图进行管理")])]),_._v(" "),t("p",[_._v("使用位图方法时，内存可能被划分为小到几个字或大到几千字节的分配单元。每个分配单元对应于位图中的一位，0 表示空闲， 1 表示占用（或者相反）。一块内存区域和其对应的位图如下")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://pic4.zhimg.com/50/v2-9b5380c5bece304f1c4520546c4a11f0_hd.jpg?source=1940ef5c",alt:"img"}}),t("img",{attrs:{src:"https://pic4.zhimg.com/80/v2-9b5380c5bece304f1c4520546c4a11f0_720w.jpg?source=1940ef5c",alt:"img"}})]),_._v(" "),t("blockquote",[t("p",[_._v("图 a 表示一段有 5 个进程和 3 个空闲区的内存，刻度为内存分配单元，阴影区表示空闲（在位图中用 0 表示）；图 b 表示对应的位图；图 c 表示用链表表示同样的信息")])]),_._v(" "),t("p",[_._v("分配单元的大小是一个重要的设计因素，分配单位越小，位图越大。然而，即使只有 4 字节的分配单元，32 位的内存也仅仅只需要位图中的 1 位。"),t("code",[_._v("32n")]),_._v(" 位的内存需要 n 位的位图，所以"),t("strong",[_._v("1 个位图只占用了 1/32 的内存")]),_._v("。如果选择更大的内存单元，位图应该要更小。如果进程的大小不是分配单元的整数倍，那么在最后一个分配单元中会有大量的内存被浪费。")]),_._v(" "),t("p",[t("code",[_._v("位图")]),_._v("提供了一种简单的方法在固定大小的内存中跟踪内存的使用情况，因为"),t("strong",[_._v("位图的大小取决于内存和分配单元的大小")]),_._v("。这种方法有一个问题，当决定为把具有 k 个分配单元的进程放入内存时，"),t("code",[_._v("内容管理器(memory manager)")]),_._v(" 必须搜索位图，在位图中找出能够运行 k 个连续 0 位的串。在位图中找出制定长度的连续 0 串是一个很耗时的操作，这是位图的缺点。（可以简单理解为在杂乱无章的数组中，找出具有一大长串空闲的数组单元）")]),_._v(" "),t("h3",{attrs:{id:"_2、使用空闲链表"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、使用空闲链表"}},[_._v("#")]),_._v(" "),t("strong",[_._v("2、使用空闲链表")])]),_._v(" "),t("p",[_._v("另一种记录内存使用情况的方法是，维护一个记录已分配内存段和空闲内存段的链表，段会包含进程或者是两个进程的空闲区域。可用上面的图 c "),t("strong",[_._v("来表示内存的使用情况")]),_._v("。链表中的每一项都可以代表一个 "),t("code",[_._v("空闲区(H)")]),_._v(" 或者是"),t("code",[_._v("进程(P)")]),_._v("的起始标志，长度和下一个链表项的位置。")]),_._v(" "),t("p",[_._v("在这个例子中，"),t("code",[_._v("段链表(segment list)")]),_._v("是按照地址排序的。这种方式的优点是，当进程终止或被交换时，更新列表很简单。一个终止进程通常有两个邻居（除了内存的顶部和底部外）。相邻的可能是进程也可能是空闲区，它们有四种组合方式。")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://pic4.zhimg.com/50/v2-e905e5d66459a3c192ed8550c82623c8_hd.jpg?source=1940ef5c",alt:"img"}}),t("img",{attrs:{src:"https://pic4.zhimg.com/80/v2-e905e5d66459a3c192ed8550c82623c8_720w.jpg?source=1940ef5c",alt:"img"}})]),_._v(" "),t("p",[_._v("当按照地址顺序在链表中存放进程和空闲区时，有几种算法可以为创建的进程（或者从磁盘中换入的进程）分配内存。")]),_._v(" "),t("ul",[t("li",[_._v("首次适配算法：在链表中进行搜索，直到找到最初的一个足够大的空闲区，将其分配。除非进程大小和空间区大小恰好相同，否则会将空闲区分为两部分，一部分为进程使用，一部分成为新的空闲区。该方法是速度很快的算法，因为索引链表结点的个数较少。")]),_._v(" "),t("li",[_._v("下次适配算法：工作方式与首次适配算法相同，但每次找到新的空闲区位置后都记录当前位置，下次寻找空闲区从上次结束的地方开始搜索，而不是与首次适配放一样从头开始；")]),_._v(" "),t("li",[_._v("最佳适配算法：搜索整个链表，找出能够容纳进程分配的最小的空闲区。这样存在的问题是，尽管可以保证为进程找到一个最为合适的空闲区进行分配，但大多数情况下，这样的空闲区被分为两部分，一部分用于进程分配，一部分会生成很小的空闲区，而这样的空闲区很难再被进行利用。")]),_._v(" "),t("li",[_._v("最差适配算法：与最佳适配算法相反，每次分配搜索最大的空闲区进行分配，从而可以使得空闲区拆分得到的新的空闲区可以更好的被进行利用。")])]),_._v(" "),t("h3",{attrs:{id:"四、页面置换算法都有哪些"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#四、页面置换算法都有哪些"}},[_._v("#")]),_._v(" "),t("strong",[_._v("四、页面置换算法都有哪些")])]),_._v(" "),t("p",[_._v("在地址映射过程中，如果在页面中发现所要访问的页面不在内存中，那么就会产生一条缺页中断。当发生缺页中断时，如果操作系统内存中没有空闲页面，那么操作系统必须在内存选择一个页面将其移出内存，以便为即将调入的页面让出空间。而用来选择淘汰哪一页的规则叫做页面置换算法。")]),_._v(" "),t("p",[_._v("下面我汇总的这些页面置换算法比较齐全，只给出简单介绍，算法具体的实现和原理读者可以自行了解。")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://pic1.zhimg.com/50/v2-0892c551665a9a025e14a79a46d28def_hd.jpg?source=1940ef5c",alt:"img"}}),t("img",{attrs:{src:"https://pic1.zhimg.com/80/v2-0892c551665a9a025e14a79a46d28def_720w.jpg?source=1940ef5c",alt:"img"}})]),_._v(" "),t("ul",[t("li",[t("code",[_._v("最优算法")]),_._v("在当前页面中置换最后要访问的页面。不幸的是，没有办法来判定哪个页面是最后一个要访问的，"),t("code",[_._v("因此实际上该算法不能使用")]),_._v("。然而，它可以作为衡量其他算法的标准。")]),_._v(" "),t("li",[t("code",[_._v("NRU")]),_._v(" 算法根据 R 位和 M 位的状态将页面氛围四类。从编号最小的类别中随机选择一个页面。NRU 算法易于实现，但是性能不是很好。存在更好的算法。")]),_._v(" "),t("li",[t("code",[_._v("FIFO")]),_._v(" 会跟踪页面加载进入内存中的顺序，并把页面放入一个链表中。有可能删除存在时间最长但是还在使用的页面，因此这个算法也不是一个很好的选择。")]),_._v(" "),t("li",[t("code",[_._v("第二次机会")]),_._v("算法是对 FIFO 的一个修改，它会在删除页面之前检查这个页面是否仍在使用。如果页面正在使用，就会进行保留。这个改进大大提高了性能。")]),_._v(" "),t("li",[t("code",[_._v("时钟")]),_._v(" 算法是第二次机会算法的另外一种实现形式，时钟算法和第二次算法的性能差不多，但是会花费更少的时间来执行算法。")]),_._v(" "),t("li",[t("code",[_._v("LRU")]),_._v(" 算法是一个非常优秀的算法，但是没有"),t("code",[_._v("特殊的硬件(TLB)")]),_._v("很难实现。如果没有硬件，就不能使用 LRU 算法。")]),_._v(" "),t("li",[t("code",[_._v("NFU")]),_._v(" 算法是一种近似于 LRU 的算法，它的性能不是非常好。")]),_._v(" "),t("li",[t("code",[_._v("老化")]),_._v(" 算法是一种更接近 LRU 算法的实现，并且可以更好的实现，因此是一个很好的选择")]),_._v(" "),t("li",[_._v("最后两种算法都使用了工作集算法。工作集算法提供了合理的性能开销，但是它的实现比较复杂。"),t("code",[_._v("WSClock")]),_._v(" 是另外一种变体，它不仅能够提供良好的性能，而且可以高效地实现。")])]),_._v(" "),t("p",[t("strong",[_._v("最好的算法是老化算法和WSClock算法")]),_._v("。他们分别是基于 LRU 和工作集算法。他们都具有良好的性能并且能够被有效的实现。还存在其他一些好的算法，但实际上这两个可能是最重要的。")]),_._v(" "),t("h2",{attrs:{id:"文档"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#文档"}},[_._v("#")]),_._v(" 文档")]),_._v(" "),t("p",[_._v("学习文档：https://leetcode-cn.com/leetbook/detail/awesome-os-guide/")])])}),[],!1,null,null,null);v.default=e.exports}}]);