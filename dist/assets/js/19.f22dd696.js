(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{425:function(_,v,t){"use strict";t.r(v);var a=t(21),e=Object(a.a)({},(function(){var _=this,v=_.$createElement,t=_._self._c||v;return t("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[t("blockquote",[t("p",[_._v("说明：本章内容为博主在原教程基础上添加自己的学习笔记，来源https://www.zhihu.com/question/446980297/answer/1755892330，教程版权归原作者所有。")])]),_._v(" "),t("h2",{attrs:{id:"一、io"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#一、io"}},[_._v("#")]),_._v(" 一、IO")]),_._v(" "),t("h3",{attrs:{id:"_1、操作系统中的时钟是什么"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、操作系统中的时钟是什么"}},[_._v("#")]),_._v(" "),t("strong",[_._v("1、操作系统中的时钟是什么")])]),_._v(" "),t("p",[t("code",[_._v("时钟(Clocks)")]),_._v(" 也被称为"),t("code",[_._v("定时器(timers)")]),_._v("，时钟/定时器对任何程序系统来说都是必不可少的。时钟负责维护时间、防止一个进程长期占用 CPU 时间等其他功能。"),t("code",[_._v("时钟软件(clock software)")]),_._v("也是一种设备驱动的方式。下面我们就来对时钟进行介绍，一般都是先讨论硬件再介绍软件，采用由下到上的方式，也是告诉你，底层是最重要的。")]),_._v(" "),t("h3",{attrs:{id:"_2、时钟硬件"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、时钟硬件"}},[_._v("#")]),_._v(" "),t("strong",[_._v("2、时钟硬件")])]),_._v(" "),t("p",[_._v("在计算机中有两种类型的时钟，这些时钟与现实生活中使用的时钟完全不一样。")]),_._v(" "),t("ul",[t("li",[_._v("比较简单的一种时钟被连接到 110 V 或 220 V 的电源线上，这样每个"),t("code",[_._v("电压周期")]),_._v("会产生一个中断，大概是 50 - 60 HZ。这些时钟过去一直占据支配地位。")]),_._v(" "),t("li",[_._v("另外的一种时钟由晶体振荡器、计数器和寄存器组成，示意图如下所示")])]),_._v(" "),t("p",[t("img",{attrs:{src:"https://pic1.zhimg.com/50/v2-a0f46fe5bb61880180d68785519dd0cb_hd.jpg?source=1940ef5c",alt:"img"}}),t("img",{attrs:{src:"https://pic1.zhimg.com/80/v2-a0f46fe5bb61880180d68785519dd0cb_720w.jpg?source=1940ef5c",alt:"img"}})]),_._v(" "),t("p",[_._v("这种时钟称为"),t("code",[_._v("可编程时钟")]),_._v(" ，可编程时钟有两种模式，一种是 "),t("code",[_._v("一键式(one-shot mode)")]),_._v("，当时钟启动时，会把存储器中的值复制到计数器中，然后，每次晶体的振荡器的脉冲都会使计数器 -1。当计数器变为 0 时，会产生一个中断，并停止工作，直到软件再一次显示启动。还有一种模式时 "),t("code",[_._v("方波(square-wave mode)")]),_._v(" 模式，在这种模式下，当计数器变为 0 并产生中断后，存储寄存器的值会自动复制到计数器中，这种周期性的中断称为一个时钟周期。")]),_._v(" "),t("h2",{attrs:{id:"二、设备控制器的主要功能"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#二、设备控制器的主要功能"}},[_._v("#")]),_._v(" "),t("strong",[_._v("二、设备控制器的主要功能")])]),_._v(" "),t("p",[_._v("设备控制器是一个"),t("code",[_._v("可编址")]),_._v("的设备，当它仅控制一个设备时，它只有一个唯一的设备地址；如果设备控制器控制多个可连接设备时，则应含有多个设备地址，并使每一个设备地址对应一个设备。")]),_._v(" "),t("p",[_._v("设备控制器主要分为两种：字符设备和块设备")]),_._v(" "),t("p",[_._v("设备控制器的主要功能有下面这些")]),_._v(" "),t("ul",[t("li",[_._v("接收和识别命令：设备控制器可以接受来自 CPU 的指令，并进行识别。设备控制器内部也会有寄存器，用来存放指令和参数")]),_._v(" "),t("li",[_._v("进行数据交换：CPU、控制器和设备之间会进行数据的交换，CPU 通过总线把指令发送给控制器，或从控制器中并行地读出数据；控制器将数据写入指定设备。")]),_._v(" "),t("li",[_._v("地址识别：每个硬件设备都有自己的地址，设备控制器能够识别这些不同的地址，来达到控制硬件的目的，此外，为使 CPU 能向寄存器中写入或者读取数据，这些寄存器都应具有唯一的地址。")]),_._v(" "),t("li",[_._v("差错检测：设备控制器还具有对设备传递过来的数据进行检测的功能。")])]),_._v(" "),t("h3",{attrs:{id:"_1、中断处理过程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_1、中断处理过程"}},[_._v("#")]),_._v(" "),t("strong",[_._v("1、中断处理过程")])]),_._v(" "),t("p",[_._v("中断处理方案有很多种，下面是 《"),t("strong",[_._v("ARM System Developer’s Guide")])]),_._v(" "),t("p",[t("strong",[_._v("Designing and Optimizing System Software")]),_._v("》列出来的一些方案")]),_._v(" "),t("ul",[t("li",[t("code",[_._v("非嵌套")]),_._v("的中断处理程序按照顺序处理各个中断，非嵌套的中断处理程序也是最简单的中断处理")]),_._v(" "),t("li",[t("code",[_._v("嵌套")]),_._v("的中断处理程序会处理多个中断而无需分配优先级")]),_._v(" "),t("li",[t("code",[_._v("可重入")]),_._v("的中断处理程序可使用优先级处理多个中断")]),_._v(" "),t("li",[t("code",[_._v("简单优先级")]),_._v("中断处理程序可处理简单的中断")]),_._v(" "),t("li",[t("code",[_._v("标准优先级")]),_._v("中断处理程序比低优先级的中断处理程序在更短的时间能够处理优先级更高的中断")]),_._v(" "),t("li",[t("code",[_._v("高优先级")]),_._v(" 中断处理程序在短时间能够处理优先级更高的任务，并直接进入特定的服务例程。")]),_._v(" "),t("li",[t("code",[_._v("优先级分组")]),_._v("中断处理程序能够处理不同优先级的中断任务")])]),_._v(" "),t("p",[_._v("下面是一些通用的中断处理程序的步骤，不同的操作系统实现细节不一样")]),_._v(" "),t("ul",[t("li",[_._v("保存所有没有被中断硬件保存的寄存器")]),_._v(" "),t("li",[_._v("为中断服务程序设置上下文环境，可能包括设置 "),t("code",[_._v("TLB")]),_._v("、"),t("code",[_._v("MMU")]),_._v(" 和页表，如果不太了解这三个概念，请参考另外一篇文章")]),_._v(" "),t("li",[_._v("为中断服务程序设置栈")]),_._v(" "),t("li",[_._v("对中断控制器作出响应，如果不存在集中的中断控制器，则继续响应中断")]),_._v(" "),t("li",[_._v("把寄存器从保存它的地方拷贝到进程表中")]),_._v(" "),t("li",[_._v("运行中断服务程序，它会从发出中断的设备控制器的寄存器中提取信息")]),_._v(" "),t("li",[_._v("操作系统会选择一个合适的进程来运行。如果中断造成了一些优先级更高的进程变为就绪态，则选择运行这些优先级高的进程")]),_._v(" "),t("li",[_._v("为进程设置 MMU 上下文，可能也会需要 TLB，根据实际情况决定")]),_._v(" "),t("li",[_._v("加载进程的寄存器，包括 PSW 寄存器")]),_._v(" "),t("li",[_._v("开始运行新的进程")])]),_._v(" "),t("p",[_._v("上面我们罗列了一些大致的中断步骤，不同性质的操作系统和中断处理程序能够处理的中断步骤和细节也不尽相同，下面是一个嵌套中断的具体运行步骤")]),_._v(" "),t("p",[t("img",{attrs:{src:"https://pic2.zhimg.com/50/v2-f08c95dad9402493345af0744af12121_hd.jpg?source=1940ef5c",alt:"img"}}),t("img",{attrs:{src:"https://pic2.zhimg.com/80/v2-f08c95dad9402493345af0744af12121_720w.jpg?source=1940ef5c",alt:"img"}})]),_._v(" "),t("h3",{attrs:{id:"_2、什么是设备驱动程序"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_2、什么是设备驱动程序"}},[_._v("#")]),_._v(" "),t("strong",[_._v("2、什么是设备驱动程序")])]),_._v(" "),t("p",[_._v("在计算机中，设备驱动程序是一种计算机程序，它能够控制或者操作连接到计算机的特定设备。驱动程序提供了与硬件进行交互的软件接口，使操作系统和其他计算机程序能够访问特定设备，不用需要了解其硬件的具体构造。")]),_._v(" "),t("h3",{attrs:{id:"_3、什么是-dma"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#_3、什么是-dma"}},[_._v("#")]),_._v(" "),t("strong",[_._v("3、什么是 DMA")])]),_._v(" "),t("p",[_._v("DMA 的中文名称是"),t("code",[_._v("直接内存访问")]),_._v("，它意味着 CPU 授予 I/O 模块权限在不涉及 CPU 的情况下读取或写入内存。也就是 DMA 可以不需要 CPU 的参与。这个过程由称为 DMA 控制器（DMAC）的芯片管理。由于 DMA 设备可以直接在内存之间传输数据，而不是使用 CPU 作为中介，因此可以缓解总线上的拥塞。DMA 通过允许 CPU 执行任务，同时 DMA 系统通过系统和内存总线传输数据来提高系统并发性。")]),_._v(" "),t("h2",{attrs:{id:"三、直接内存访问的特点"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#三、直接内存访问的特点"}},[_._v("#")]),_._v(" "),t("strong",[_._v("三、直接内存访问的特点")])]),_._v(" "),t("p",[_._v("DMA 方式有如下特点：")]),_._v(" "),t("ul",[t("li",[_._v("数据传送以数据块为基本单位")]),_._v(" "),t("li",[_._v("所传送的数据从设备直接送入主存，或者从主存直接输出到设备上")]),_._v(" "),t("li",[_._v("仅在传送一个或多个数据块的开始和结束时才需 CPU 的干预，而整块数据的传送则是在控制器的控制下完成。")])]),_._v(" "),t("p",[_._v("DMA 方式和中断驱动控制方式相比，减少了 CPU 对 I/O 操作的干预，进一步提高了 CPU 与 I/O 设备的并行操作程度。")]),_._v(" "),t("p",[_._v("DMA 方式的线路简单、价格低廉，适合高速设备与主存之间的成批数据传送，小型、微型机中的快速设备均采用这种方式，但其功能较差，不能满足复杂的 I/O 要求。")]),_._v(" "),t("h2",{attrs:{id:"文档"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#文档"}},[_._v("#")]),_._v(" 文档")]),_._v(" "),t("p",[_._v("学习文档：https://leetcode-cn.com/leetbook/detail/awesome-os-guide/")])])}),[],!1,null,null,null);v.default=e.exports}}]);