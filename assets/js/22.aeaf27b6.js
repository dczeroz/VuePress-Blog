(window.webpackJsonp=window.webpackJsonp||[]).push([[22],{428:function(_,t,v){"use strict";v.r(t);var a=v(21),s=Object(a.a)({},(function(){var _=this,t=_.$createElement,v=_._self._c||t;return v("ContentSlotsDistributor",{attrs:{"slot-key":_.$parent.slotKey}},[v("blockquote",[v("p",[_._v("说明：本章内容为博主在原教程基础上添加自己的学习笔记，来源https://www.zhihu.com/question/446980297/answer/1755892330，教程版权归原作者所有。")])]),_._v(" "),v("h2",{attrs:{id:"一、死锁"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#一、死锁"}},[_._v("#")]),_._v(" 一、死锁")]),_._v(" "),v("h3",{attrs:{id:"_1、什么是僵尸进程"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1、什么是僵尸进程"}},[_._v("#")]),_._v(" "),v("strong",[_._v("1、什么是僵尸进程")])]),_._v(" "),v("p",[_._v("僵尸进程是已完成且处于终止状态，但在进程表中却仍然存在的进程。僵尸进程通常发生在父子关系的进程中，由于父进程仍需要读取其子进程的退出状态所造成的。")]),_._v(" "),v("h3",{attrs:{id:"_2、死锁产生的原因"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2、死锁产生的原因"}},[_._v("#")]),_._v(" "),v("strong",[_._v("2、死锁产生的原因")])]),_._v(" "),v("p",[_._v("死锁产生的原因大致有两个：资源竞争和程序执行顺序不当")]),_._v(" "),v("h3",{attrs:{id:"_3、死锁产生的必要条件"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3、死锁产生的必要条件"}},[_._v("#")]),_._v(" "),v("strong",[_._v("3、死锁产生的必要条件")])]),_._v(" "),v("p",[_._v("资源死锁可能出现的情况主要有")]),_._v(" "),v("ul",[v("li",[_._v("互斥条件：每个资源都被分配给了一个进程或者资源是可用的")]),_._v(" "),v("li",[_._v("保持和等待条件：已经获取资源的进程被认为能够获取新的资源")]),_._v(" "),v("li",[_._v("不可抢占条件：分配给一个进程的资源不能强制的从其他进程抢占资源，它只能由占有它的进程显示释放")]),_._v(" "),v("li",[_._v("循环等待：死锁发生时，系统中一定有两个或者两个以上的进程组成一个循环，循环中的每个进程都在等待下一个进程释放的资源。")])]),_._v(" "),v("h2",{attrs:{id:"二、死锁的恢复方式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#二、死锁的恢复方式"}},[_._v("#")]),_._v(" 二、死锁的恢复方式**")]),_._v(" "),v("p",[_._v("所以针对检测出来的死锁，我们要对其进行恢复，下面我们会探讨几种死锁的恢复方式")]),_._v(" "),v("h3",{attrs:{id:"_1、通过抢占进行恢复"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1、通过抢占进行恢复"}},[_._v("#")]),_._v(" "),v("strong",[_._v("1、通过抢占进行恢复")])]),_._v(" "),v("p",[_._v("在某些情况下，可能会临时将某个资源从它的持有者转移到另一个进程。比如在不通知原进程的情况下，将某个资源从进程中强制取走给其他进程使用，使用完后又送回。这种恢复方式一般比较困难而且有些简单粗暴，并不可取。")]),_._v(" "),v("h3",{attrs:{id:"_2、通过回滚进行恢复"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2、通过回滚进行恢复"}},[_._v("#")]),_._v(" "),v("strong",[_._v("2、通过回滚进行恢复")])]),_._v(" "),v("p",[_._v("如果系统设计者和机器操作员知道有可能发生死锁，那么就可以定期检查流程。进程的检测点意味着进程的状态可以被写入到文件以便后面进行恢复。检测点不仅包含"),v("code",[_._v("存储映像(memory image)")]),_._v("，还包含"),v("code",[_._v("资源状态(resource state)")]),_._v("。一种更有效的解决方式是不要覆盖原有的检测点，而是每出现一个检测点都要把它写入到文件中，这样当进程执行时，就会有一系列的检查点文件被累积起来。")]),_._v(" "),v("p",[_._v("为了进行恢复，要从上一个较早的检查点上开始，这样所需要资源的进程会回滚到上一个时间点，在这个时间点上，死锁进程还没有获取所需要的资源，可以在此时对其进行资源分配。")]),_._v(" "),v("h3",{attrs:{id:"_3、杀死进程恢复"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3、杀死进程恢复"}},[_._v("#")]),_._v(" "),v("strong",[_._v("3、杀死进程恢复")])]),_._v(" "),v("p",[_._v("最简单有效的解决方案是直接杀死一个死锁进程。但是杀死一个进程可能照样行不通，这时候就需要杀死别的资源进行恢复。")]),_._v(" "),v("p",[_._v("另外一种方式是选择一个环外的进程作为牺牲品来释放进程资源。")]),_._v(" "),v("h3",{attrs:{id:"_4、如何破坏死锁"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4、如何破坏死锁"}},[_._v("#")]),_._v(" "),v("strong",[_._v("4、如何破坏死锁")])]),_._v(" "),v("p",[_._v("和死锁产生的必要条件一样，如果要破坏死锁，也是从下面四种方式进行破坏。")]),_._v(" "),v("h3",{attrs:{id:"_5、破坏互斥条件"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_5、破坏互斥条件"}},[_._v("#")]),_._v(" "),v("strong",[_._v("5、破坏互斥条件")])]),_._v(" "),v("p",[_._v("我们首先考虑的就是"),v("strong",[_._v("破坏互斥使用条件")]),_._v("。如果资源不被一个进程独占，那么死锁肯定不会产生。如果两个打印机同时使用一个资源会造成混乱，打印机的解决方式是使用 "),v("code",[_._v("假脱机打印机(spooling printer)")]),_._v(" ，这项技术可以允许多个进程同时产生输出，在这种模型中，实际请求打印机的唯一进程是打印机守护进程，也称为后台进程。后台进程不会请求其他资源。我们可以消除打印机的死锁。")]),_._v(" "),v("p",[_._v("后台进程通常被编写为能够输出完整的文件后才能打印，假如两个进程都占用了假脱机空间的一半，而这两个进程都没有完成全部的输出，就会导致死锁。")]),_._v(" "),v("p",[_._v("因此，尽量做到尽可能少的进程可以请求资源。")]),_._v(" "),v("h3",{attrs:{id:"_6、破坏保持等待的条件"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_6、破坏保持等待的条件"}},[_._v("#")]),_._v(" "),v("strong",[_._v("6、破坏保持等待的条件")])]),_._v(" "),v("p",[_._v("第二种方式是如果我们能阻止持有资源的进程请求其他资源，我们就能够消除死锁。一种实现方式是让所有的进程开始执行前请求全部的资源。如果所需的资源可用，进程会完成资源的分配并运行到结束。如果有任何一个资源处于频繁分配的情况，那么没有分配到资源的进程就会等待。")]),_._v(" "),v("p",[_._v("很多进程"),v("strong",[_._v("无法在执行完成前就知道到底需要多少资源")]),_._v("，如果知道的话，就可以使用银行家算法；还有一个问题是这样"),v("strong",[_._v("无法合理有效利用资源")]),_._v("。")]),_._v(" "),v("p",[_._v("还有一种方式是进程在请求其他资源时，先释放所占用的资源，然后再尝试一次获取全部的资源。")]),_._v(" "),v("h3",{attrs:{id:"_7、破坏不可抢占条件"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_7、破坏不可抢占条件"}},[_._v("#")]),_._v(" "),v("strong",[_._v("7、破坏不可抢占条件")])]),_._v(" "),v("p",[_._v("破坏不可抢占条件也是可以的。可以通过"),v("code",[_._v("虚拟化")]),_._v("的方式来避免这种情况。")]),_._v(" "),v("h3",{attrs:{id:"_8、破坏循环等待条件"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_8、破坏循环等待条件"}},[_._v("#")]),_._v(" "),v("strong",[_._v("8、破坏循环等待条件")])]),_._v(" "),v("p",[_._v("现在就剩最后一个条件了，循环等待条件可以通过多种方法来破坏。一种方式是制定一个标准，一个进程在任何时候只能使用一种资源。如果需要另外一种资源，必须释放当前资源。")]),_._v(" "),v("p",[_._v("另一种方式是将所有的资源统一编号，如下图所示")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://pic1.zhimg.com/50/v2-4c459da16890967a763b493a50720de4_hd.jpg?source=1940ef5c",alt:"img"}}),v("img",{attrs:{src:"https://pic1.zhimg.com/80/v2-4c459da16890967a763b493a50720de4_720w.jpg?source=1940ef5c",alt:"img"}})]),_._v(" "),v("p",[_._v("进程可以在任何时间提出请求，但是所有的请求都必须按照资源的顺序提出。如果按照此分配规则的话，那么资源分配之间不会出现环。")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://pic4.zhimg.com/50/v2-916472053cec8c8ca2c903a2bb251ed9_hd.jpg?source=1940ef5c",alt:"img"}}),v("img",{attrs:{src:"https://pic4.zhimg.com/80/v2-916472053cec8c8ca2c903a2bb251ed9_720w.jpg?source=1940ef5c",alt:"img"}})]),_._v(" "),v("h2",{attrs:{id:"三、死锁类型"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#三、死锁类型"}},[_._v("#")]),_._v(" "),v("strong",[_._v("三、死锁类型")])]),_._v(" "),v("h3",{attrs:{id:"_1、两阶段加锁"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1、两阶段加锁"}},[_._v("#")]),_._v(" "),v("strong",[_._v("1、两阶段加锁")])]),_._v(" "),v("p",[_._v("虽然很多情况下死锁的避免和预防都能处理，但是效果并不好。随着时间的推移，提出了很多优秀的算法用来处理死锁。例如在数据库系统中，一个经常发生的操作是请求锁住一些记录，然后更新所有锁定的记录。当同时有多个进程运行时，就会有死锁的风险。")]),_._v(" "),v("p",[_._v("一种解决方式是使用 "),v("code",[_._v("两阶段提交(two-phase locking)")]),_._v("。顾名思义分为两个阶段，一阶段是进程尝试一次锁定它需要的所有记录。如果成功后，才会开始第二阶段，第二阶段是执行更新并释放锁。第一阶段并不做真正有意义的工作。")]),_._v(" "),v("p",[_._v("如果在第一阶段某个进程所需要的记录已经被加锁，那么该进程会释放所有锁定的记录并重新开始第一阶段。从某种意义上来说，这种方法类似于预先请求所有必需的资源或者是在进行一些不可逆的操作之前请求所有的资源。")]),_._v(" "),v("p",[_._v("不过在一般的应用场景中，两阶段加锁的策略并不通用。如果一个进程缺少资源就会半途中断并重新开始的方式是不可接受的。")]),_._v(" "),v("h3",{attrs:{id:"_2、通信死锁"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2、通信死锁"}},[_._v("#")]),_._v(" "),v("strong",[_._v("2、通信死锁")])]),_._v(" "),v("p",[_._v("我们上面一直讨论的是资源死锁，资源死锁是一种死锁类型，但并不是唯一类型，还有通信死锁，也就是两个或多个进程在发送消息时出现的死锁。进程 A 给进程 B 发了一条消息，然后进程 A 阻塞直到进程 B 返回响应。假设请求消息丢失了，那么进程 A 在一直等着回复，进程 B 也会阻塞等待请求消息到来，这时候就产生"),v("code",[_._v("死锁")]),_._v("。")]),_._v(" "),v("p",[_._v("尽管会产生死锁，但是这并不是一个资源死锁，因为 A 并没有占据 B 的资源。事实上，通信死锁并没有完全可见的资源。根据死锁的定义来说：每个进程因为等待其他进程引起的事件而产生阻塞，这就是一种死锁。相较于最常见的通信死锁，我们把上面这种情况称为"),v("code",[_._v("通信死锁(communication deadlock)")]),_._v("。")]),_._v(" "),v("p",[_._v("通信死锁不能通过调度的方式来避免，但是可以使用通信中一个非常重要的概念来避免："),v("code",[_._v("超时(timeout)")]),_._v("。在通信过程中，只要一个信息被发出后，发送者就会启动一个定时器，定时器会记录消息的超时时间，如果超时时间到了但是消息还没有返回，就会认为消息已经丢失并重新发送，通过这种方式，可以避免通信死锁。")]),_._v(" "),v("p",[_._v("但是并非所有网络通信发生的死锁都是通信死锁，也存在资源死锁，下面就是一个典型的资源死锁。")]),_._v(" "),v("p",[_._v("当一个数据包从主机进入路由器时，会被放入一个缓冲区，然后再传输到另外一个路由器，再到另一个，以此类推直到目的地。缓冲区都是资源并且数量有限。如下图所示，每个路由器都有 10 个缓冲区（实际上有很多）。")]),_._v(" "),v("p",[v("img",{attrs:{src:"https://pic1.zhimg.com/50/v2-00e8301d2b1192ab8f89f160519126bd_hd.jpg?source=1940ef5c",alt:"img"}}),v("img",{attrs:{src:"https://pic1.zhimg.com/80/v2-00e8301d2b1192ab8f89f160519126bd_720w.jpg?source=1940ef5c",alt:"img"}})]),_._v(" "),v("p",[_._v("假如路由器 A 的所有数据需要发送到 B ，B 的所有数据包需要发送到 D，然后 D 的所有数据包需要发送到 A 。没有数据包可以移动，因为在另一端没有缓冲区可用，这就是一个典型的资源死锁。")]),_._v(" "),v("h3",{attrs:{id:"_3、活锁"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3、活锁"}},[_._v("#")]),_._v(" "),v("strong",[_._v("3、活锁")])]),_._v(" "),v("p",[_._v("某些情况下，当进程意识到它不能获取所需要的下一个锁时，就会尝试礼貌的释放已经获得的锁，然后等待非常短的时间再次尝试获取。可以想像一下这个场景：当两个人在狭路相逢的时候，都想给对方让路，相同的步调会导致双方都无法前进。")]),_._v(" "),v("p",[_._v("现在假想有一对并行的进程用到了两个资源。它们分别尝试获取另一个锁失败后，两个进程都会释放自己持有的锁，再次进行尝试，这个过程会一直进行重复。很明显，这个过程中没有进程阻塞，但是进程仍然不会向下执行，这种状况我们称之为 "),v("code",[_._v("活锁(livelock)")]),_._v("。")]),_._v(" "),v("h3",{attrs:{id:"_4、饥饿"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4、饥饿"}},[_._v("#")]),_._v(" "),v("strong",[_._v("4、饥饿")])]),_._v(" "),v("p",[_._v("与死锁和活锁的一个非常相似的问题是 "),v("code",[_._v("饥饿(starvvation)")]),_._v("。想象一下你什么时候会饿？一段时间不吃东西是不是会饿？对于进程来讲，最重要的就是资源，如果一段时间没有获得资源，那么进程会产生饥饿，这些进程会永远得不到服务。")]),_._v(" "),v("p",[_._v("我们假设打印机的分配方案是每次都会分配给最小文件的进程，那么要打印大文件的进程会永远得不到服务，导致进程饥饿，进程会无限制的推后，虽然它没有阻塞。")]),_._v(" "),v("h2",{attrs:{id:"文档"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#文档"}},[_._v("#")]),_._v(" 文档")]),_._v(" "),v("p",[_._v("学习文档：https://leetcode-cn.com/leetbook/detail/awesome-os-guide/")])])}),[],!1,null,null,null);t.default=s.exports}}]);